// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/ser.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteGuide_GetMessage_FullMethodName      = "/api.RouteGuide/GetMessage"
	RouteGuide_GetMessageLists_FullMethodName = "/api.RouteGuide/GetMessageLists"
	RouteGuide_AddMessage_FullMethodName      = "/api.RouteGuide/AddMessage"
	RouteGuide_AddMessageLists_FullMethodName = "/api.RouteGuide/AddMessageLists"
)

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	// A Simple RPC
	GetMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// A server-side-streaming RPC
	GetMessageLists(ctx context.Context, in *MessageKey, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Keys], error)
	// A client-streaming RPC
	AddMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MessageRequest, MessageResponse], error)
	// A bidirectional-streaming RPC
	AddMessageLists(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageKey, Keys], error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GetMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, RouteGuide_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) GetMessageLists(ctx context.Context, in *MessageKey, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Keys], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], RouteGuide_GetMessageLists_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageKey, Keys]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_GetMessageListsClient = grpc.ServerStreamingClient[Keys]

func (c *routeGuideClient) AddMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MessageRequest, MessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[1], RouteGuide_AddMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageRequest, MessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_AddMessageClient = grpc.ClientStreamingClient[MessageRequest, MessageResponse]

func (c *routeGuideClient) AddMessageLists(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageKey, Keys], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[2], RouteGuide_AddMessageLists_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageKey, Keys]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_AddMessageListsClient = grpc.BidiStreamingClient[MessageKey, Keys]

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility.
type RouteGuideServer interface {
	// A Simple RPC
	GetMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	// A server-side-streaming RPC
	GetMessageLists(*MessageKey, grpc.ServerStreamingServer[Keys]) error
	// A client-streaming RPC
	AddMessage(grpc.ClientStreamingServer[MessageRequest, MessageResponse]) error
	// A bidirectional-streaming RPC
	AddMessageLists(grpc.BidiStreamingServer[MessageKey, Keys]) error
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteGuideServer struct{}

func (UnimplementedRouteGuideServer) GetMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedRouteGuideServer) GetMessageLists(*MessageKey, grpc.ServerStreamingServer[Keys]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageLists not implemented")
}
func (UnimplementedRouteGuideServer) AddMessage(grpc.ClientStreamingServer[MessageRequest, MessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedRouteGuideServer) AddMessageLists(grpc.BidiStreamingServer[MessageKey, Keys]) error {
	return status.Errorf(codes.Unimplemented, "method AddMessageLists not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}
func (UnimplementedRouteGuideServer) testEmbeddedByValue()                    {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	// If the following call pancis, it indicates UnimplementedRouteGuideServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_GetMessageLists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteGuideServer).GetMessageLists(m, &grpc.GenericServerStream[MessageKey, Keys]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_GetMessageListsServer = grpc.ServerStreamingServer[Keys]

func _RouteGuide_AddMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).AddMessage(&grpc.GenericServerStream[MessageRequest, MessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_AddMessageServer = grpc.ClientStreamingServer[MessageRequest, MessageResponse]

func _RouteGuide_AddMessageLists_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).AddMessageLists(&grpc.GenericServerStream[MessageKey, Keys]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteGuide_AddMessageListsServer = grpc.BidiStreamingServer[MessageKey, Keys]

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _RouteGuide_GetMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessageLists",
			Handler:       _RouteGuide_GetMessageLists_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddMessage",
			Handler:       _RouteGuide_AddMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddMessageLists",
			Handler:       _RouteGuide_AddMessageLists_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/ser.proto",
}
